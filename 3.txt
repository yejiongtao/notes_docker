1. volumes
	a volume is a mount point on the container's directory tree where a portion of the host directory tree has been mounted
		images are appropriate for packaging and distributing relatively static files like programs 
			volumes hold dynamic data or specializations
		this makes images reusable and data simple to share
	
	volume types
		bind mount volumes
			use any user-specified directory or file on the host OS
			useful if you want to share data with other processes running outside a container
				such as components of the host system itself
			-v /path/on/host:/path/in/container
				(you must specify locations with absolute paths)
			-v /path/on/host:/path/in/container:ro
				read-only

			the content in /path/in/container will be replaced
				which is the basis for the polymorphic container pattern

			not limited to directories
				you can use bind mount volumes to mount individual files
				but if the file doesn't exist on the host
					Docker assumes that you wanted to use a directory
					and create it on the host, mount it in the container, even if the location is occupied by a file
			
			problems
				it creates an opportunity for conflit with other containers
				creates dependencies on the host

		managed volumes
			use locations created by the Docker in space controlled by it

	



cassandra example

